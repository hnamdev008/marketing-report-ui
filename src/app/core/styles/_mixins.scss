/*======================================

  Utility Mixins
    -> Responsive utilities

======================================*/

@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent} {
    display: table !important;
  }
  tr#{$parent} {
    display: table-row !important;
  }
  th#{$parent},
  td#{$parent} {
    display: table-cell !important;
  }
}

// $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

/*--------------------------------------
  Named Breakpoints are xs = phone, sm = tablet-portrait, md = tablet-landscape-desktop, lg = large-desktop
--------------------------------------*/
@mixin respond-to($media) {
  /* ----- Landscape phones and down : < 768px ----- */
  @if $media==xs {
    @media (max-width: $screen-xs-max) {
      @content;
    }
  }
  /* ----- Landscape phone to portrait tablet : >= 768px, < 992px ----- */
  @else if $media==sm {
    @media (min-width: $screen-sm) and (max-width: $screen-sm-max) {
      @content;
    }
  }
  /* ----- Portrait tablet to landscape and desktop: >= 992px, < 1200px ----- */
  @else if $media==md {
    @media (min-width: $screen-md) and (max-width: $screen-md-max) {
      @content;
    }
  }
  /* ----- Desktop and large desktop : >= 1200px ----- */
  @else if $media==lg {
    @media (min-width: $screen-lg) {
      @content;
    }
  } // Specific max width
  @else {
    @media only screen and (max-width: #{$media}px) {
      @content;
    }
  }
}

/*--------------------------------------
  Example Usage:
    - For single breakpoint
    @include respondto (lg) {
      height: 2em;
    }
    - For multiple breakpoint
    @include respondto (xs, sm, md) {
      height: 2em;
    }
    - For custom breakpoint
    @include respondto (1600) {
      height: 2em;
    }
--------------------------------------*/

@mixin respondto($media...) {
  @each $mediatype in $media {
    @include respond-to($mediatype) {
      @content;
    }
  }
}

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

$breakpoints: (
	"xs": (
		min-width: $screen-xs
	),
	"sm": (
		min-width: $screen-sm
	),
	"md": (
		min-width: $screen-md
	),
	"lg": (
		min-width: $screen-lg
	)
) !default;

@mixin respond-from($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		// Prints a media query based on the value
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
